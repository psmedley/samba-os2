'\" t
.\"     Title: vfs_fileid
.\"    Author: [see the "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 02/19/2024
.\"    Manual: System Administration tools
.\"    Source: Samba 4.19.5
.\"  Language: English
.\"
.TH "VFS_FILEID" "8" "02/19/2024" "Samba 4\&.19\&.5" "System Administration tools"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
vfs_fileid \- Generates file_id structs with unique device id values for cluster setups\&. It also adds ways to deliberately break lock coherency for specific inodes
.SH "SYNOPSIS"
.HP \w'\ 'u
vfs objects = fileid
.SH "DESCRIPTION"
.PP
This VFS module is part of the
\fBsamba\fR(7)
suite\&.
.PP
Samba uses file_id structs to uniquely identify files for locking purpose\&. By default the file_id contains the device and inode number returned by the
stat()
system call\&. As the file_id is a unique identifier of a file, it must be the same on all nodes in a cluster setup\&. This module overloads the
SMB_VFS_FILE_ID_CREATE()
operation and generates the device number based on the configured algorithm (see the "fileid:algorithm" option)\&.
.PP
When using the fsname or fsid algorithm a
stat()
and
statfs()
call is required for all mounted file systems to generate the file_id\&. If e\&.g\&. an NFS file system is unresponsive such a call might block and the smbd process will become unresponsive\&. Use the "fileid:fstype deny", "fileid:fstype allow", "fileid:mntdir deny", or "fileid:mntdir allow" options to ignore potentially unresponsive file systems\&.
.SH "OPTIONS"
.PP
fileid:algorithm = ALGORITHM
.RS 4
Available algorithms are
fsname,
fsid,
next_module\&. The default value is
fsname\&. As well as the following legacy algorithms:
fsname_nodirs,
fsname_norootdir,
fsname_norootdir_ext
and
hostname\&.
.sp
The
fsname
algorithm generates device id by hashing the kernel device name\&.
.sp
The
fsid
algorithm generates the device id from the
f_fsid
returned from the
statfs()
syscall\&.
.sp
The
next_module
algorithm lets the next vfs module in the module chain generate the id\&. This is mainly used in combination with the various \*(Aqnolock\*(Aq features the fileid module provides\&.
.sp
The legacy
hostname
algorithm generates unique devid by hashing the hostname and low level device id\&. It also implies
fileid:nolock_all_inodes=yes\&. This can be used to deliberately break lock coherency in a cluster and with
fileid:nolock_max_slots
also between local processes within a node\&. NOTE: Do not use this without knowing what you are doing! It breaks SMB semantics and it can lead to data corruption! This implies
fileid:nolock_all_inodes=yes\&.
.sp
The legacy
fsname_nodirs
algorithm is an alias for using the
fsname
algorithm together with
fileid:nolock_all_dirs=yes\&. NOTE: Do not use this without knowing what you are doing! It breaks SMB semantics! See
fileid:nolock_paths
for a more fine grained approach\&.
.sp
The legacy
fsname_norootdir
algorithm is an alias for using the
fsname
algorithm together with
fileid:nolock_paths= \(lq\&.\(rq\&. It means this can be used to deliberately break lock coherency in a cluster for the root directory of a share\&.
.sp
The legacy
fsname_norootdir_ext
algorithm is an alias for using the
fsname
algorithm together with
fileid:nolock_paths= \(lq\&.\(rq
and
fileid:nolock_max_slots = 18446744073709551615\&. It means this can be used to deliberately break lock coherency completely for the root directory of a share\&. Even local processes are no longer lock coherent\&.
.RE
.PP
fileid:mapping = ALGORITHM
.RS 4
This option is the legacy version of the
fileid:algorithm
option, which was used in earlier versions of fileid mapping feature in custom Samba 3\&.0 versions\&.
.RE
.PP
fileid:fstype deny = LIST
.RS 4
List of file system types to be ignored for file_id generation\&.
.RE
.PP
fileid:fstype allow = LIST
.RS 4
List of file system types to be allowed for file_id generation\&. If this option is set, file system types not listed here are ignored\&.
.RE
.PP
fileid:mntdir deny = LIST
.RS 4
List of file system mount points to be ignored for file_id generation\&.
.RE
.PP
fileid:mntdir allow = LIST
.RS 4
List of file system mount points to be allowed for file_id generation\&. If this option is set, file system mount points not listed here are ignored\&.
.RE
.PP
fileid:nolock_max_slots = NUMBER(1\-18446744073709551615)
.RS 4
This option alters the behavior of the
nolock
algorithm in a ways that it also breaks the lock coherency between individual processes on the same host\&. The default is to have just 1 concurrent slot available per host\&. By incressing the number of slots you can specify how many concurrent processes can work on a given inode without contention, the number should typically be larger than the a number of logical cpus, maybe 2 times of num_cpus\&.
.RE
.PP
fileid:nolock_all_dirs = BOOL
.RS 4
This option triggers the use of the fileid nolock behavior for all directory inodes, which can be used to deliberately break the lock coherency for all directories\&. NOTE: Do not use this without knowing what you are doing! It breaks SMB semantics! See
fileid:nolock_paths
for a more fine grained approach\&.
.RE
.PP
fileid:nolock_all_inodes = BOOL
.RS 4
This option triggers the use of the fileid nolock algorithm for all directoriy inode, which can be used to deliberately break the lock coherency for all directories\&. NOTE: Do not use this without knowing what you are doing! It breaks SMB semantics and it can lead to data corruption! See
fileid:nolock_paths
for a more fine grained approach\&.
.RE
.PP
fileid:nolock_paths = LIST
.RS 4
This option specifies a path list referring to files and/or directories, which should use fileid nolock algorithm in order to deliberately break the lock coherency for them\&. The specified paths can be relative to the share root directory or absolute\&. The names are case sensitive unix pathnames! Note all paths are only evaluated at tree connect time, when the share is being connected, from there on only the related device and inode numbers from the stat() syscall are compared\&. Non existing paths will generate a log level 0 message\&. NOTE: This option should be used with care as it breaks SMB semantics! But it may help in situation where a specific (commonly read\-only) inode is highly contended\&.
.RE
.PP
fileid:nolockinode = NUMBER
.RS 4
This legacy option triggers use of the fileid nolock behavior for the configured inode, while ignoring and device id\&. This can be used to deliberately break lock coherency for the corresponding file or directory in a cluster\&. Using the
fileid:nolock_paths
option is much more flexible and simpler to use\&.
.RE
.SH "EXAMPLES"
.PP
Usage of the
fileid
module with the
fsid
algorithm:
.sp
.if n \{\
.RS 4
.\}
.nf
        \fI[global]\fR
	\m[blue]\fBvfs objects = fileid\fR\m[]
	\m[blue]\fBfileid:algorithm = fsid\fR\m[]
.fi
.if n \{\
.RE
.\}
.PP
Usage of the
fileid
module in order avoid load on heavily contended (most likely read\-only) inodes\&.
.sp
.if n \{\
.RS 4
.\}
.nf
        \fI[global]\fR
	\m[blue]\fBvfs objects = fileid\fR\m[]
	\m[blue]\fBfileid:algorithm = next_module\fR\m[]
	\m[blue]\fBfileid:nolock_paths = \&. ContendedFolder1 /path/to/contended\&.exe\fR\m[]
	\m[blue]\fBfileid:nolock_max_slots = 256\fR\m[]
.fi
.if n \{\
.RE
.\}
.SH "VERSION"
.PP
This man page is part of version 4\&.19\&.5 of the Samba suite\&.
.SH "AUTHOR"
.PP
The original Samba software and related utilities were created by Andrew Tridgell\&. Samba is now developed by the Samba Team as an Open Source project similar to the way the Linux kernel is developed\&.
